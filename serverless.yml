service: product-api

frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iam:
    role:
      statements: 
        - Effect: Allow
          Action: 
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListShards
            - dynamodb:ListStreams 
          Resource: 'arn:aws:dynamodb:us-east-1:*:*'
resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: S
        StreamSpecification:
              StreamViewType: NEW_IMAGE

functions:
  productsApiPost:
    handler: src/LambdaFunctions/productsApiPost.productsApiPost
    description: Lambda function for the productsApi
    memorySize: 256
    events:
      - http:
          path: /products
          method: post
          cors: true
  productsApiDelete:
    handler: src/LambdaFunctions/productsApiDelete.productsApiDelete
    description: Lambda function for the productsApi
    memorySize: 256
    events:
      - http:
          path: /products/{id}
          method: delete
          cors: true
  productsApiUpdate:
    handler: src/LambdaFunctions/productsApiUpdate.productsApiUpdate
    description: Lambda function for the productsApi
    memorySize: 256
    events:
      - http:
          path: /products/{id}
          method: put
          cors: true
  productsApiGet:
    handler: src/LambdaFunctions/productsApiGet.productsApiGet
    description: Lambda function for the productsApi
    memorySize: 256
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
      - http:
          path: /products
          method: get
          cors: true
  updateThirdPartyService:
    handler: src/LambdaFunctions/updateThirdPartyService.updateThirdPartyService
    description: Lambda function for the productsApi
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ProductsTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
          maximumRetryAttempts: -1
          maximumRecordAgeInSeconds: -1
          enabled: true
          batchWindow: 1
        
custom:
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true   
  dynamodbStream:
    host: localhost
    port: ${self:custom.dynamodb.start.port}
    pollForever: true
    region: us-east-1
    streams:
      - table: ${self:resources.Resources.ProductsTable.Properties.TableName}
        functions:
          - updateThirdPartyService    

        

